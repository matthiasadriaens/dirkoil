coordinates(sp.stations) <- ~lon+lat
coordinates(sp.BELGIUM) <- ~lon+lat
#create pairwise distance
distance <- gDistance(sp.BELGIUM,sp.stations, byid=T)
?gDistance
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
# Maarten past dit nog aan, naar een radius
min.d <- apply(distance, 1, function(x) order(x, decreasing=F)[2])
basetable <- cbind(stations, BELGIUM[min.d,], apply(distance, 1, function(x) sort(x, decreasing=F)[2]))
# er zit twee keer lon en lat in, 1 keer van het station en 1 keer van het 'district' .
# die van het district hebben we niet meer nodig
clean_basetable <- basetable [,1:10]
# TERMINALS zijn geen station en hoeven dus geen average traffic te hebben
clean_basetable$stationtype <- as.character(clean_basetable$stationtype)
clean_basetable$truck_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
clean_basetable$total_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
################ Genetic algorithm to finetune the location of the predetermined stations
if(!require('genalg', character.only = TRUE, quietly = TRUE)) install.packages('genalg'); require('genalg', character.only = TRUE, quietly = TRUE)
#df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
#df_coordinates <- data.frame(df_coordinates)
#str(df_coordinates)
DC <- clean_basetable[7:16,]
coordinates <- c(DC$lon,DC$lat)
total_traffic <- sum(DC$total_daily_avg)
total_truck <- sum(DC$truck_daily_avg)
fn <- function(coordinates){
cat("\n################# BEGIN ITERATION ################\n")
cat("############# BEGIN = ",total_traffic , "\n")
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
?gDistance
print(coordinates)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(optimal_tanks$truck_daily_avg)
cat("############# End : ",opt, "\n")
return(-opt)
}
#Group assignment predictive
#working directory -- adapt this to where you stored the files
setwd("C:/Users/matth/OneDrive/Desktop/lngapp/data")
#Read in the data
load("lngStations_BE.Rdata")
load("cngStations_BE.Rdata")
load("petrolStations_BE.Rdata")
load("Roads.Rdata")
#Cleaning the data and creating the basetables
vars <- c("id","lon","lat","fueltype","stationtype","name","status")
terminals <- read.csv("terminals.csv")
terminals$fueltype <- rep(0,nrow(terminals))
terminals$stationtype <- rep("terminal",nrow(terminals))
terminals$fueltype <- rep(0,nrow(terminals))
terminals$status <- rep("active",nrow(terminals))
term <- terminals[,c(1,3,4,5,6,2,7)]
names(term) <- vars
stations <- term
lngStations$country <- NULL
lngStations$id <- c(1:nrow(lngStations))
lngStations$stationtype <- rep("lng",nrow(lngStations))
lng <- lngStations[,c(6,5,4,3,7,1,2)]
names(lng) <- vars
stations <- rbind(stations,lng)
cngStations$country <- NULL
cngStations$stationtype <- rep("cng",nrow(cngStations))
cngStations$id <- c(1:nrow(cngStations))
cng <- cngStations[,c(7,5,4,3,6,1,2)]
names(cng) <- vars
stations <- rbind(stations,cng)
petrolStations$stationtype <- rep("petrol",nrow(petrolStations))
petrolStations$status <-  rep("active",nrow(petrolStations))
petrolStations$id <- c(1:nrow(petrolStations))
petrol <- petrolStations[,c(7,3,2,4,5,1,6)]
names(petrol) <- vars
stations <- rbind(stations,petrol)
stations$id <- c(1:nrow(stations))
#############
#Intalling and loading packages to calculate distance
if(!require(rgeos, quietly = TRUE)) install.packages('rgeos') ; require(rgeos, quietly = TRUE)
if(!require(sp, quietly = TRUE)) install.packages('sp') ; require(sp, quietly = TRUE)
library (rgeos)
library (sp)
sp.BELGIUM <- BELGIUM
sp.stations <- stations
coordinates(sp.stations) <- ~lon+lat
coordinates(sp.BELGIUM) <- ~lon+lat
#create pairwise distance
distance <- gDistance(sp.BELGIUM,sp.stations, byid=T)
?gDistance
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
# Maarten past dit nog aan, naar een radius
min.d <- apply(distance, 1, function(x) order(x, decreasing=F)[2])
basetable <- cbind(stations, BELGIUM[min.d,], apply(distance, 1, function(x) sort(x, decreasing=F)[2]))
# er zit twee keer lon en lat in, 1 keer van het station en 1 keer van het 'district' .
# die van het district hebben we niet meer nodig
clean_basetable <- basetable [,1:10]
# TERMINALS zijn geen station en hoeven dus geen average traffic te hebben
clean_basetable$stationtype <- as.character(clean_basetable$stationtype)
clean_basetable$truck_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
clean_basetable$total_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
################ Genetic algorithm to finetune the location of the predetermined stations
if(!require('genalg', character.only = TRUE, quietly = TRUE)) install.packages('genalg'); require('genalg', character.only = TRUE, quietly = TRUE)
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
str(df_coordinates)
DC <- clean_basetable[7:16,]
coordinates <- c(DC$lon,DC$lat)
total_traffic <- sum(DC$total_daily_avg)
total_truck <- sum(DC$truck_daily_avg)
fn <- function(coordinates){
cat("\n################# BEGIN ITERATION ################\n")
cat("############# BEGIN = ",total_traffic , "\n")
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
?gDistance
print(coordinates)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(optimal_tanks$truck_daily_avg)
cat("############# End : ",opt, "\n")
return(-opt)
}
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
load("Roads.Rdata")
View(BELGIUM)
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
#Group assignment predictive
#working directory -- adapt this to where you stored the files
setwd("C:/Users/matth/OneDrive/Desktop/lngapp/data")
#Read in the data
load("lngStations_BE.Rdata")
load("cngStations_BE.Rdata")
load("petrolStations_BE.Rdata")
load("Roads.Rdata")
#Cleaning the data and creating the basetables
vars <- c("id","lon","lat","fueltype","stationtype","name","status")
terminals <- read.csv("terminals.csv")
terminals$fueltype <- rep(0,nrow(terminals))
terminals$stationtype <- rep("terminal",nrow(terminals))
terminals$fueltype <- rep(0,nrow(terminals))
terminals$status <- rep("active",nrow(terminals))
term <- terminals[,c(1,3,4,5,6,2,7)]
names(term) <- vars
stations <- term
lngStations$country <- NULL
lngStations$id <- c(1:nrow(lngStations))
lngStations$stationtype <- rep("lng",nrow(lngStations))
lng <- lngStations[,c(6,5,4,3,7,1,2)]
names(lng) <- vars
stations <- rbind(stations,lng)
cngStations$country <- NULL
cngStations$stationtype <- rep("cng",nrow(cngStations))
cngStations$id <- c(1:nrow(cngStations))
cng <- cngStations[,c(7,5,4,3,6,1,2)]
names(cng) <- vars
stations <- rbind(stations,cng)
petrolStations$stationtype <- rep("petrol",nrow(petrolStations))
petrolStations$status <-  rep("active",nrow(petrolStations))
petrolStations$id <- c(1:nrow(petrolStations))
petrol <- petrolStations[,c(7,3,2,4,5,1,6)]
names(petrol) <- vars
stations <- rbind(stations,petrol)
stations$id <- c(1:nrow(stations))
#############
#Intalling and loading packages to calculate distance
if(!require(rgeos, quietly = TRUE)) install.packages('rgeos') ; require(rgeos, quietly = TRUE)
if(!require(sp, quietly = TRUE)) install.packages('sp') ; require(sp, quietly = TRUE)
library (rgeos)
library (sp)
sp.BELGIUM <- BELGIUM
sp.stations <- stations
coordinates(sp.stations) <- ~lon+lat
coordinates(sp.BELGIUM) <- ~lon+lat
#create pairwise distance
distance <- gDistance(sp.BELGIUM,sp.stations, byid=T)
?gDistance
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
# Maarten past dit nog aan, naar een radius
min.d <- apply(distance, 1, function(x) order(x, decreasing=F)[2])
basetable <- cbind(stations, BELGIUM[min.d,], apply(distance, 1, function(x) sort(x, decreasing=F)[2]))
# er zit twee keer lon en lat in, 1 keer van het station en 1 keer van het 'district' .
# die van het district hebben we niet meer nodig
clean_basetable <- basetable [,1:10]
# TERMINALS zijn geen station en hoeven dus geen average traffic te hebben
clean_basetable$stationtype <- as.character(clean_basetable$stationtype)
clean_basetable$truck_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
clean_basetable$total_daily_avg[clean_basetable$stationtype == "terminal"] <- "0"
################ Genetic algorithm to finetune the location of the predetermined stations
if(!require('genalg', character.only = TRUE, quietly = TRUE)) install.packages('genalg'); require('genalg', character.only = TRUE, quietly = TRUE)
DC <- clean_basetable[7:16,]
coordinates <- c(DC$lon,DC$lat)
total_traffic <- sum(as.numeric(DC$total_daily_avg))
total_truck <- sum(as.numeric(DC$truck_daily_avg))
str(clean_basetable)
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
str(df_coordinates)
fn <- function(coordinates){
cat("\n################# BEGIN ITERATION ################\n")
cat("############# BEGIN = ",total_traffic , "\n")
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
?gDistance
print(coordinates)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(as.numeric(optimal_tanks$truck_daily_avg))
cat("############# End : ",opt, "\n")
return(-opt)
}
model <- rbga(stringMin = coordinates - 5,
stringMax = coordinates + 5,
popSize = 50, iters = 10,
mutationChance = 0.01, evalFunc = fn,
verbose   = TRUE)
model <- rbga(stringMin = coordinates - 5,
stringMax = coordinates + 5,
popSize = 50, iters = 10,
mutationChance = 0.01, evalFunc = fn,
verbose   = TRUE)
fn <- function(coordinates){
#cat("\n################# BEGIN ITERATION ################\n")
#cat("############# BEGIN = ",total_traffic , "\n")
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
?gDistance
#print(coordinates)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(as.numeric(optimal_tanks$truck_daily_avg))
#cat("############# End : ",opt, "\n")
return(-opt)
}
model <- rbga(stringMin = coordinates - 5,
stringMax = coordinates + 5,
popSize = 50, iters = 10,
mutationChance = 0.01, evalFunc = fn,
verbose   = TRUE)
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
fn <- function(coordinates){
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(as.numeric(optimal_tanks$truck_daily_avg))
return(-opt)
}
model <- rbga(stringMin = coordinates - 5,
stringMax = coordinates + 5,
popSize = 50, iters = 2,
mutationChance = 0.01, evalFunc = fn,
verbose   = TRUE)
fn <- function(coordinates){
df_coordinates <- matrix(coordinates, ncol=2, byrow = FALSE)
df_coordinates <- data.frame(df_coordinates)
sp.df_coordinates <- df_coordinates
sp.clean_basetable <- clean_basetable
coordinates(sp.clean_basetable) <- ~lon+lat
coordinates(sp.df_coordinates) <- ~ X1 + X2
distance_tanks <- gDistance(sp.clean_basetable,sp.df_coordinates, byid=T)
# alle distances zijn nu berekend, minimum distance per gasstation naar 'district' nemen
min.tanks <- apply(distance_tanks, 1, function(x) order(x, decreasing=F)[2])
optimal_tanks <-clean_basetable[min.tanks,]
opt <- sum(as.numeric(optimal_tanks$truck_daily_avg))
return(-opt)
}
model <- rbga(stringMin = coordinates - 5,
stringMax = coordinates + 5,
popSize = 50, iters = 1,
mutationChance = 0.01, evalFunc = fn,
verbose   = TRUE)
model
#Traffic that passes close to the stations that we selected and optimised
total_cost_OPT <- model$best[length(model$best)]
total_cost_OPT
#Optimal coordinates
coordinates_OPT <-  model$population[which.min(model$evaluations),]
coordinates_OPT
# put optimal solution in dataframe
df_coordinates_OPT <- matrix(coordinates_OPT, ncol=2, byrow = FALSE)
colnames(df_coordinates_OPT) <- c("lon","lat")
df_coordinates_OPT <- data.frame(df_coordinates_OPT)
# link with closest terminals
clean_terminals <- clean_basetable[1:6,]
sp.df_coordinates_OPT <- df_coordinates_OPT
sp.clean_terminals <- clean_terminals
coordinates(sp.df_coordinates_OPT) <- ~lon+lat
coordinates(sp.clean_terminals) <- ~lon+lat
#create pairwise distance
distance_terminals <- gDistance(sp.clean_terminals,sp.df_coordinates_OPT, byid=T)
# alle distances zijn nu berekend, minimum distance van optimaal gasstation naar 'terminal' nemen
min.terminals <- apply(distance_terminals, 1, function(x) order(x, decreasing=F)[2])
df_coordinates_OPT
dim(min.terminals)
min.terminals_join <- matrix(min.terminals, ncol=1, byrow = FALSE)
min.terminals_join <- data.frame(min.terminals_join)
optimal_terminals <- cbind(df_coordinates_OPT, min.terminals_join)
optimal_terminals
clean_basetable[clean_basetable$lon = 4.536265,]
clean_basetable[clean_basetable$lon == 4.536265,]
clean_basetable[clean_basetable$lon == 4.536,]
clean_basetable[clean_basetable$lon == 4.53,]
clean_basetable[clean_basetable$lon == 5.125647,]
optimal_terminals
clean_basetable[clean_basetable$lon == 7.778062,]
clean_basetable[clean_basetable$lon == 4.607219,]
clean_basetable[clean_basetable$lon == 5.036399,]
optimal_terminals
(100000 + c(1:10))
optimal_terminals$id <- (100000 + c(1:10))
optimal_terminals
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
?addPolylines
stations[1:6,]
optimal_terminals
terminals <- stations[1:6,]
terminals
terminals <- stations[1:6,1:3]
terminals
names(terminals) <- c("terminal.id","lon","lat")
terminals
optimal_terminals
terminals <- stations[1:6,1:4]
names(terminals) <- c("terminal.id","lon","lat")
terminals
terminals <- stations[1:6,1:4]
names(terminals) <- c("terminal.id","lon","lat","troep")
terminals
optimal_terminals
min.terminals_join <- matrix(min.terminals, ncol=1, byrow = FALSE)
min.terminals_join <- data.frame(min.terminals_join)
optimal_terminals <- cbind(df_coordinates_OPT, min.terminals_join)
terminals <- stations[1:6,1:4]
names(terminals) <- c("terminal.id","lon","lat")
terminals
optimal_terminals
min.terminals_join <- matrix(min.terminals, ncol=1, byrow = FALSE)
min.terminals_join <- data.frame(min.terminals_join)
optimal_terminals <- cbind(df_coordinates_OPT, min.terminals_join)
terminals <- stations[1:6,1:3]
names(terminals) <- c("terminal.id","lon","lat")
optimal_terminals
terminals
min.terminals_join <- matrix(min.terminals, ncol=1, byrow = FALSE)
min.terminals_join <- data.frame(min.terminals_join)
optimal_terminals <- cbind(df_coordinates_OPT, min.terminals_join)
terminals <- stations[1:6,c(2,3,1)]
names(terminals) <- c("terminal.id","lon","lat")
terminals
names(terminals) <- c("lon","lat","terminal.id")
min.terminals_join <- matrix(min.terminals, ncol=1, byrow = FALSE)
min.terminals_join <- data.frame(min.terminals_join)
optimal_terminals <- cbind(df_coordinates_OPT, min.terminals_join)
terminals <- stations[1:6,c(2,3,1)]
names(terminals) <- c("lon","lat","terminal.id")
terminals
optimal_terminals
terminals <- stations[1:6,c(2,3,1)]
terminals$is.terminal <- "yes"
names(terminals) <- c("lon","lat","terminal.id","is.terminal")
terminals
mydf <- data.frame(Observation = c("A", "B"),
InitialLat = c(62.469722,48.0975),
InitialLong = c(6.187194, 16.3108),
NewLat = c(51.4749, 51.4882),
NewLong = c(-0.221619, -0.302621),
stringsAsFactors = FALSE)
mydf
mydf2 <- data.frame(group = c("A", "B"),
lat = c(mydf$InitialLat, mydf$NewLat),
long = c(mydf$InitialLong, mydf$NewLong))
mydf2
terminals
terminals <- stations[1:6,c(2,3,1)]
names(terminals) <- c("Tlon","Tlat","terminal.id")
terminals
optimal_terminals
terminals <- stations[1:6,c(2,3,1)]
names(terminals) <- c("Tlon","Tlat","min.terminals_join")
outputdf <- merge(optimal_terminals,terminals)
outputdf
output.final <- data.frame(group = outputdf$min.terminals_join,
lat = c(outputdf$lat, outputdf$Tlat),
long = c(outputdf$lon, outputdf$Tlon))
output.final
output.final$id <- c(1:20)
output.final
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
dest_df <- data.frame (lat = c(41.82, 46.88, 41.48, 39.14),
lon = c(-88.32, -124.10, -88.33, -114.90)
)
dest_df
orig_df <- data.frame (lat = c(rep.int(40.75, nrow(dest_df))),
long = c(rep.int(-73.99,nrow(dest_df)))
)
orig_df
install.packages("googleway")
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
api_key <- "AIzaSyARD53P2rLbwG8QxVKC6LXWF6Xm-CUbQu8"
map_key <- "AIzaSyARD53P2rLbwG8QxVKC6LXWF6Xm-CUbQu8"
res <- google_directions(key = api_key,
origin = "Hamme, Belgium",
destination = "Brussels, Belgium")
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_route
res
res
df_route <- data.frame(route = res$routes$overview_polyline$points)
df_route
View(df_route)
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
as.numeric(output_df[i, c(4, 7)])
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
outputdf
output_df
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
runApp('C:/Users/matth/OneDrive/Desktop/lngapp')
